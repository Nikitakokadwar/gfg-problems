//{ Driver Code Starts
#include<iostream>
using namespace std;

/* Link list Node */
struct Node
{
    int data;
    struct Node *next;
    
    Node(int x)
    {
        data = x;
        next = NULL;
    }
};

Node* sortedMerge(struct Node* a, struct Node* b);

/* Function to print Nodes in a given linked list */
void printList(struct Node *n)
{
    while (n!=NULL)
    {
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}

/* Driver program to test above function*/
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m;
        cin>>n>>m;

        int data;
        cin>>data;
        struct Node *head1 = new Node(data);
        struct Node *tail1 = head1;
        for (int i = 1; i < n; ++i)
        {
            cin>>data;
            tail1->next = new Node(data);
            tail1 = tail1->next;
        }

        cin>>data;
        struct Node *head2 = new Node(data);
        struct Node *tail2 = head2;
        for(int i=1; i<m; i++)
        {
            cin>>data;
            tail2->next = new Node(data);
            tail2 = tail2->next;
        }

        Node *head = sortedMerge(head1, head2);
        printList(head);
    }
    return 0;
}

// } Driver Code Ends


 

/* Link list Node
struct Node {
  int data;
  struct Node *next;
  
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/
//Function to merge two sorted linked list.
Node* sortedMerge(Node* head1, Node* head2)  
{  
    // code here
   //create new head whose store the addition of both
//   Node*newhead=NULL;
//   Node*newtail=NULL;
//   //first chcek the head1 is null or head2 is null
//   if(head1==NULL)
//       return head2;
       
   
//   if(head2==NULL)
//       return head1;
   
//   if(head1->data < head2->data){
//       newhead=head1;
//       newtail=head1;
//       head1=head1->next;
//   }
//   else{
//       newhead=head2;
//       newtail=head2;
//       head2=head2->next;
//   }
//   while(head1!=NULL && head2 !=NULL){
//       if(head1->data<head2->data){
//           newtail->next=head1;
//           newtail=newtail->next;
//           head1=head1->next;
//       }
//       else{
//           newtail->next=head2;
//           newtail=newtail->next;
//           head2=head2->next;
//       }
//   }
//   while(head1!=NULL){
//       newtail->next=head1;
//   }
//   while(head2!=NULL){
//       newtail->next=head2;
//   }
//   return newhead;



// Node* sortedMerge(Node* head1, Node* head2)  
// {  
    // using recursion
    if(head1==NULL)
        return head2;
    if(head2==NULL)
        return head1;
    
    if(head1->data>head2->data)
      swap(head1,head2);
    
    Node*res = head1;
    
    while(head1 && head2){
        Node*temp = NULL;
        
        while(head1 && head1->data <= head2->data){
            temp = head1;
            head1 = head1->next;
        }
        temp->next = head2;
        swap(head1,head2);
    }
    return res;
}  

